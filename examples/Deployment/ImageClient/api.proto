/* Copyright (c) 2018-2019, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package trtlab.deploy.image_client;
 
service Inference {
   rpc Classify (ImageInfo) returns (Classifications) {}
   rpc Detection (ImageInfo) returns (Detections) {}

   rpc ClassifyStream (stream ImageInfo) returns (stream Classifications) {}
   rpc DetectionSream (stream ImageInfo) returns (stream Detections) {}
}
 
message ImageInfo {
    string api_key = 1;
    string image_uuid = 2;
    string model_name = 3;
}

message Classifications
{
    string image_uuid = 1;
    repeated Score scores =2;
    Details details = 3;
}

message Detections
{
    string image_uuid = 1;
    repeated Object objects = 2;
    Details details = 3;
}

message Score
{
    int32 class_idx = 1;
    float score = 2;
}

message Object
{
    string class_name = 1;
    float upper_left_x = 2;  // [0, 1] normalized on width
    float upper_left_y = 3;  // [0, 1] normalized on height
    float width = 4;         // [0, 1] normalized on width
    float height = 5;        // [0, 1] normalized on height
}

// this is where you can customize what details your service
// returns to the user
message Details
{
    float request_time = 1;
    float compute_time = 2;
}