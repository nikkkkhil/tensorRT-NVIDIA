// Copyright (c) 2018-2019, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package nvidia.inferenceserver;

import "api.proto";
import "request_status.proto";
import "server_status.proto";

service GRPCService {
  // Get server or model status
  rpc Status(StatusRequest) returns (StatusResponse) {}

  // Control server profiling
  rpc Profile(ProfileRequest) returns (ProfileResponse) {}

  // Health check
  rpc Health(HealthRequest) returns (HealthResponse) {}

  // Perform inference. [ Set the maximum message size (default 4 MB)
  // and transmit in one pass Seems like Tensorflow uses this approach
  // to transfer tensor which can be large
  // https://github.com/grpc/grpc/issues/8975 ]
  rpc Infer(InferRequest) returns (InferResponse) {}
}

// Request message for server status.
message StatusRequest {
  // The specific model status to be returned. Return status for all
  // models if empty.
  string model_name = 1;
}

// Response message for server status.
message StatusResponse {
  RequestStatus request_status = 1;
  ServerStatus server_status = 2;
}

// Request message for profile.
message ProfileRequest {
  string cmd = 1;
}

// Response message for profile.
message ProfileResponse{
  RequestStatus request_status = 1;
}

// Request message for health.
message HealthRequest {
  string mode = 1;
}

// Response message for health.
message HealthResponse{
  RequestStatus request_status = 1;
  bool health = 2;
}

// Request message for inference.
message InferRequest {
  // Name of model to use for inference
  string model_name = 1;

  // Version of the model to use for inference. If not specified use
  // the latest/most-recent version of the model. [ Use string here so
  // default value of empty indicates not specified].
  string version = 2;

  // Meta-data for the inference request.
  InferRequestHeader meta_data = 3;

  // Raw input tensor data in the order specified in 'meta_data'.
  repeated bytes raw_input = 4;

  uint64 batch_id = 100;
  uint32 batch_size = 101;
  uint64 sysv_offset = 102;
}

// Response message for inference.
message InferResponse {
  RequestStatus request_status = 1;

  // Meta-data for the inference response.
  InferResponseHeader meta_data = 2;

  // Raw output tensor data in the order specified in 'meta_data'.
  repeated bytes raw_output = 3;

  uint64 batch_id = 100;
  float compute_time = 101;
  float request_time = 102;
}
